// Generated by view binder compiler. Do not edit!
package com.readrops.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.readrops.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAccountTypeListBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final TextView accountTypeListAppName;

  @NonNull
  public final TextView accountTypeListChoose;

  @NonNull
  public final ConstraintLayout accountTypeListRoot;

  @NonNull
  public final Button accountTypeOpmlImport;

  @NonNull
  public final TextView accountTypeOr;

  @NonNull
  public final RecyclerView accountTypeRecyclerview;

  private ActivityAccountTypeListBinding(@NonNull NestedScrollView rootView,
      @NonNull TextView accountTypeListAppName, @NonNull TextView accountTypeListChoose,
      @NonNull ConstraintLayout accountTypeListRoot, @NonNull Button accountTypeOpmlImport,
      @NonNull TextView accountTypeOr, @NonNull RecyclerView accountTypeRecyclerview) {
    this.rootView = rootView;
    this.accountTypeListAppName = accountTypeListAppName;
    this.accountTypeListChoose = accountTypeListChoose;
    this.accountTypeListRoot = accountTypeListRoot;
    this.accountTypeOpmlImport = accountTypeOpmlImport;
    this.accountTypeOr = accountTypeOr;
    this.accountTypeRecyclerview = accountTypeRecyclerview;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAccountTypeListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAccountTypeListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_account_type_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAccountTypeListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.account_type_list_app_name;
      TextView accountTypeListAppName = rootView.findViewById(id);
      if (accountTypeListAppName == null) {
        break missingId;
      }

      id = R.id.account_type_list_choose;
      TextView accountTypeListChoose = rootView.findViewById(id);
      if (accountTypeListChoose == null) {
        break missingId;
      }

      id = R.id.account_type_list_root;
      ConstraintLayout accountTypeListRoot = rootView.findViewById(id);
      if (accountTypeListRoot == null) {
        break missingId;
      }

      id = R.id.account_type_opml_import;
      Button accountTypeOpmlImport = rootView.findViewById(id);
      if (accountTypeOpmlImport == null) {
        break missingId;
      }

      id = R.id.account_type_or;
      TextView accountTypeOr = rootView.findViewById(id);
      if (accountTypeOr == null) {
        break missingId;
      }

      id = R.id.account_type_recyclerview;
      RecyclerView accountTypeRecyclerview = rootView.findViewById(id);
      if (accountTypeRecyclerview == null) {
        break missingId;
      }

      return new ActivityAccountTypeListBinding((NestedScrollView) rootView, accountTypeListAppName,
          accountTypeListChoose, accountTypeListRoot, accountTypeOpmlImport, accountTypeOr,
          accountTypeRecyclerview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
